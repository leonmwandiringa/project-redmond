package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"strings"
	"time"

	"github.com/ghodss/yaml"
	"github.com/urfave/cli"
)

type Kalekin struct {
	Services_name              string
	Services                   []Service
	Services_policies          interface{}
	Global_enviroment_policies interface{}
}

type Service struct {
	Artifacts []Artifact
}

type Artifact struct {
	Artifact_name                 string
	Artifact_type                 string
	Artifact_registry_repository  string
	Artifact_source               string
	ports                         []string
	Artifact_enviroment_variables interface{}
	Artifact_policies             interface{}
}

func main() {
	app := cli.NewApp()
	app.Name = "Kalekin"
	app.Version = "0.1"
	app.Compiled = time.Now()
	app.Authors = []cli.Author{
		cli.Author{
			Name:  "Leon Mwandiringa",
			Email: "leonmwandiringa@gmail.com",
		},
	}
	app.Copyright = "(c) 2019 Kalekin (project redmond)"
	app.Usage = "Containers management"
	app.Commands = []cli.Command{
		{
			Name:  "run",
			Usage: "runs current deployment",
			Action: func(c *cli.Context) error {
				if !dockerEnvCheck() {
					return nil
				}
				err := parseConfig()
				if err != nil {
					return nil
				}

				return nil
			},
		},
	}
	app.OnUsageError = func(c *cli.Context, err error, isSubcommand bool) error {
		if isSubcommand {
			return err
		}
		fmt.Fprintf(c.App.Writer, "Error: an unknown error occured\r\n")
		return nil
	}

	err := app.Run(os.Args)
	if err != nil {
		log.Fatal(err)
	}
}

func dockerEnvCheck() bool {
	_, dockerErr := exec.LookPath("docker")
	_, dockerComposeErr := exec.LookPath("docker-compose")
	if dockerErr != nil && dockerComposeErr != nil {
		log.Fatal("Error: Docker is not installed on this machine, please install docker and docker compose first\r\n")
	}
	return (dockerErr == nil && dockerComposeErr == nil)
}

//parse file
func parseConfig() error {
	configFile, err := os.Open("Kalekin.json")
	defer configFile.Close()
	if err != nil {
		log.Fatal("Error: an error occured, couldnt find the config file\r\n")
		return err
	}

	configContents, err := ioutil.ReadAll(configFile)
	if err != nil {
		log.Fatal("Error: an error occured, couldnt read file contents\r\n")
		return err
	}

	return writeConfigFiles(configContents)

}

func writeConfigFiles(config []byte) error {
	yamlContent, err := yaml.JSONToYAML(config)
	if err != nil {
		log.Fatalf("Error: an error occured converting config contents\r\n %", err)
		return err
	}

	var jsonContents Kalekin
	validJson := json.Unmarshal(config, &jsonContents)
	if validJson != nil {
		log.Fatal("Error: an error occured reading config contents\r\n")
		return validJson
	}

	var fileToWrite string
	for _, service := range jsonContents.Services {
		fmt.Sprintf("%s", service)
		fileToWrite = fmt.Sprintf("build.%s.yml", jsonContents.Services_name)
		writeToFile(fileToWrite, yamlContent)
	}

	return nil
}

func writeToFile(file string, content []byte) bool {
	formattedContent := formatTemplate(content)
	err := ioutil.WriteFile(file, formattedContent, 775)
	if err != nil {
		log.Fatal("Error: an error ocurred writing to file. might be a permissions issue")
		return false
	}
	return true
}

func formatTemplate(content []byte) []byte {
	dumpString := fmt.Sprintf("%s", content)
	formattedContent := strings.Replace(dumpString, "\n\r", "\r\n\t", -1)
	template := `#this file was generated by Kalekin(Prokect redmond)
version: '3.7'`
	return []byte(template + "\r\n\t" + formattedContent)
}
